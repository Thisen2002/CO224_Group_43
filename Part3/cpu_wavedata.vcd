$date
	Sun Jun 01 15:51:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 3 & WRITEREG [2:0] $end
$var wire 1 ' WRITEENABLE $end
$var wire 1 ( SIGN $end
$var wire 8 ) REGOUT2 [7:0] $end
$var wire 8 * REGOUT1 [7:0] $end
$var wire 3 + READREG2 [2:0] $end
$var wire 3 , READREG1 [2:0] $end
$var wire 8 - OUT_SIGN [7:0] $end
$var wire 8 . OUT_IMM [7:0] $end
$var wire 8 / OUT2_S [7:0] $end
$var wire 8 0 OPCODE [7:0] $end
$var wire 8 1 IMMEDIATE [7:0] $end
$var wire 1 2 IMM $end
$var wire 8 3 ALURESULT [7:0] $end
$var wire 3 4 ALUOP [2:0] $end
$var reg 32 5 PC [31:0] $end
$scope module alu_inst $end
$var wire 8 6 or_out [7:0] $end
$var wire 8 7 forward_out [7:0] $end
$var wire 8 8 and_out [7:0] $end
$var wire 8 9 add_out [7:0] $end
$var wire 3 : SELECT [2:0] $end
$var wire 8 ; DATA2 [7:0] $end
$var wire 8 < DATA1 [7:0] $end
$var reg 8 = RESULT [7:0] $end
$scope module add $end
$var wire 8 > RESULT [7:0] $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 8 @ DATA1 [7:0] $end
$upscope $end
$scope module andg $end
$var wire 8 A RESULT [7:0] $end
$var wire 8 B DATA2 [7:0] $end
$var wire 8 C DATA1 [7:0] $end
$upscope $end
$scope module fwd $end
$var wire 8 D RESULT [7:0] $end
$var wire 8 E DATA2 [7:0] $end
$upscope $end
$scope module org $end
$var wire 8 F RESULT [7:0] $end
$var wire 8 G DATA2 [7:0] $end
$var wire 8 H DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module control_inst $end
$var wire 8 I OPCODE [7:0] $end
$var reg 3 J ALUOP [2:0] $end
$var reg 1 2 IMM $end
$var reg 1 ( SIGN $end
$var reg 1 ' WRITEENABLE $end
$upscope $end
$scope module mux1 $end
$var wire 1 ( SELECT $end
$var wire 8 K DATA2 [7:0] $end
$var wire 8 L DATA1 [7:0] $end
$var reg 8 M OUTPUT [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 8 N DATA1 [7:0] $end
$var wire 8 O DATA2 [7:0] $end
$var wire 1 2 SELECT $end
$var reg 8 P OUTPUT [7:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 # CLK $end
$var wire 8 Q IN [7:0] $end
$var wire 3 R INADDRESS [2:0] $end
$var wire 8 S OUT1 [7:0] $end
$var wire 3 T OUT1ADDRESS [2:0] $end
$var wire 8 U OUT2 [7:0] $end
$var wire 3 V OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ' WRITE $end
$upscope $end
$scope module twos_inst $end
$var wire 8 W DATA2 [7:0] $end
$var wire 8 X OUTPUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
x(
x'
bx &
bx %
1$
0#
bx "
bx !
$end
#4
1#
#5
0$
#8
0#
#12
1#
#16
0#
#20
1#
#24
0#
#28
1#
#32
0#
#36
1#
#40
0#
#44
1#
#48
0#
#52
1#
#56
0#
#60
1#
#64
0#
#68
1#
#72
0#
#76
1#
#80
0#
#84
1#
#88
0#
#92
1#
#96
0#
#100
1#
#104
0#
#108
1#
#112
0#
#116
1#
#120
0#
#124
1#
#128
0#
#132
1#
#136
0#
#140
1#
#144
0#
#148
1#
#152
0#
#156
1#
#160
0#
#164
1#
#168
0#
#172
1#
#176
0#
#180
1#
#184
0#
#188
1#
#192
0#
#196
1#
#200
0#
#204
1#
#208
0#
#212
1#
#216
0#
#220
1#
#224
0#
#228
1#
#232
0#
#236
1#
#240
0#
#244
1#
#248
0#
#252
1#
#256
0#
#260
1#
#264
0#
#268
1#
#272
0#
#276
1#
#280
0#
#284
1#
#288
0#
#292
1#
#296
0#
#300
1#
#304
0#
#308
1#
#312
0#
#316
1#
#320
0#
#324
1#
#328
0#
#332
1#
#336
0#
#340
1#
#344
0#
#348
1#
#352
0#
#356
1#
#360
0#
#364
1#
#368
0#
#372
1#
#376
0#
#380
1#
#384
0#
#388
1#
#392
0#
#396
1#
#400
0#
#404
1#
#408
0#
#412
1#
#416
0#
#420
1#
#424
0#
#428
1#
#432
0#
#436
1#
#440
0#
#444
1#
#448
0#
#452
1#
#456
0#
#460
1#
#464
0#
#468
1#
#472
0#
#476
1#
#480
0#
#484
1#
#488
0#
#492
1#
#496
0#
#500
1#
#504
0#
#505
